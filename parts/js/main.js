// Generated by CoffeeScript 1.7.1
(function() {
  var assert, backlog, cloud, draw, draw_hl_fade, draw_status, focus, graph, k, tags, v, vis, _ref,
    __hasProp = {}.hasOwnProperty;

  assert = function(condition, message) {
    if (!condition) {
      throw message || 'Assertion failed';
    }
  };

  tags = {
    indexed: ffhome_tags,
    sorted: ((function() {
      var _results;
      _results = [];
      for (k in ffhome_tags) {
        if (!__hasProp.call(ffhome_tags, k)) continue;
        v = ffhome_tags[k];
        _results.push({
          tag: k,
          value: v.value,
          links: v.links
        });
      }
      return _results;
    })()).sort(function(a, b) {
      return b.value - a.value;
    }),
    links_box: d3.select('#tag-links'),
    edges: ffhome_tag_edges,
    highlight: null
  };

  vis = {
    fill: d3.scale.category20(),
    box: d3.select('#vis'),
    data: null,
    status: d3.select('#vis-status div'),
    status_counter: 0
  };

  _ref = [vis.box.node().clientWidth, vis.box.node().clientHeight], vis.w = _ref[0], vis.h = _ref[1];

  vis.svg = vis.box.select('svg').attr('width', vis.w).attr('height', vis.h);

  vis.bg = vis.svg.append('g').classed({
    background: true
  });

  vis.cloud = vis.svg.append('g').classed({
    'tag-cloud': true
  }).attr('transform', 'translate(' + [vis.w >> 1, vis.h >> 1] + ')');

  vis.graph = vis.svg.append('g').classed({
    'tag-graph': true
  });

  assert(vis.h > 100 && vis.w > 100, vis);

  vis.font_scale = vis.box.style('font-size');

  assert(vis.font_scale.match(/px$/), vis);

  vis.font_scale = parseInt(vis.font_scale);

  vis.font_scale = d3.scale.linear().range([vis.font_scale, vis.font_scale * 3]).domain([+tags.sorted[tags.sorted.length - 1].value || 1, +tags.sorted[0].value]);

  draw_hl_fade = function(selection) {
    var hl_check;
    assert((selection != null) || vis.data);
    hl_check = function(d) {
      return !tags.highlight || d.tag === tags.highlight;
    };
    if (selection == null) {
      selection = vis.cloud.selectAll('text').data(vis.data, function(d) {
        return d.tag;
      });
    }
    return selection.transition().duration(1000).style('opacity', function(d) {
      if (hl_check(d)) {
        return 1;
      } else {
        return 0.2;
      }
    });
  };

  draw = function(data, bounds) {
    var exit_group, exit_group_node, scale, text, text_transition;
    scale = bounds ? Math.min(vis.w / Math.abs(bounds[0].x - vis.w / 2), vis.w / Math.abs(bounds[1].x - vis.w / 2), vis.h / Math.abs(bounds[0].y - vis.h / 2), vis.h / Math.abs(bounds[1].y - vis.h / 2)) / 2 : 1;
    vis.data = data;
    vis.status_counter = 0;
    text = vis.cloud.selectAll('text').data(data, function(d) {
      return d.tag;
    });
    text_transition = text.transition().duration(1000).attr('transform', function(d) {
      return 'translate(' + [d.x, d.y] + ')rotate(' + d.rotate + ')';
    }).style('font-size', function(d) {
      return d.size + 'px';
    });
    draw_hl_fade(text_transition);
    text_transition = text.enter().append('text').attr('text-anchor', 'middle').attr('transform', function(d) {
      return 'translate(' + [d.x, d.y] + ')rotate(' + d.rotate + ')';
    }).style('font-size', function(d) {
      return d.size + 'px';
    }).on('click', function(d) {
      return focus(d);
    }).style('opacity', 1e-6);
    draw_hl_fade(text_transition);
    text.style('font-family', function(d) {
      return d.font;
    }).style('fill', function(d) {
      return vis.fill(d.tag);
    }).text(function(d) {
      return d.tag;
    });
    exit_group = vis.bg.append('g').attr('transform', vis.cloud.attr('transform'));
    exit_group_node = exit_group.node();
    text.exit().each(function() {
      return exit_group_node.appendChild(this);
    });
    exit_group.transition().duration(1000).style('opacity', 1e-6).remove();
    return vis.cloud.transition().delay(250).duration(750).attr('transform', 'translate(' + [vis.w >> 1, vis.h >> 1] + ')scale(' + scale + ')');
  };

  draw_status = function() {
    vis.status_counter += 1;
    return vis.status.style('width', ((vis.status_counter / tags.sorted.length) * 100) + '%');
  };

  cloud = d3.layout.cloud().size([vis.w, vis.h]).spiral('archimedean').font('Impact').fontSize(function(d) {
    return vis.font_scale(d.value);
  }).timeInterval(Infinity).words(tags.sorted).text(function(d) {
    return d.tag;
  }).on('word', draw_status).on('end', draw).start();

  graph = d3.layout.force().gravity(.05).distance(100).charge(-100).size([vis.w, vis.h]);

  d3.select('#vis-shuffle').on('click', function(d) {
    tags.highlight = null;
    cloud.stop().start();
    return tags.links_box.style('display', 'none');
  });

  focus = function(d) {
    var links;
    tags.highlight = d.tag;
    draw_hl_fade();
    links = tags.links_box.select('ul').selectAll('li').data(tags.indexed[d.tag].links, function(d, i) {
      return d.url;
    });
    links.enter().append('li').append('a').attr('href', function(d) {
      return d.url;
    }).text(function(d) {
      return d.title || d.url;
    });
    links.exit().remove();
    return tags.links_box.style('display', 'block');
  };

  if ((typeof ffhome_links !== "undefined" && ffhome_links !== null) && ffhome_links.length) {
    backlog = d3.select('#backlog');
    backlog.select('ul').selectAll('li').data(ffhome_links).enter().append('li').append('a').attr('href', function(d) {
      return d.url;
    }).text(function(d) {
      return d.title || d.url;
    });
    backlog.style('display', 'block');
  }

}).call(this);
